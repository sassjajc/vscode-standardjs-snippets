{
	"var assignment": {
		"prefix": "vas",
		"body": "var ${1:name} = ${2:value}"
	},
	"let assignment": {
		"prefix": "las",
		"body": "let ${1:name} = ${2:value}"
	},
	"let yielded assignment": {
		"prefix": "ly",
		"body": "let ${1:name} = yield ${2:value}"
	},
	"const assignment": {
		"prefix": "cna",
		"body": "const ${1:name} = ${2:value}"
	},
	"const object": {
		"prefix": "cnob",
		"body": "const ${1:name} = {\n\t${0}\n}"
	},
	"const object destructuring": {
		"prefix": "cod",
		"body": "const {${1:name}} = ${2:object}"
	},
	"const array": {
		"prefix": "cnar",
		"body": "const ${1:name} = [\n\t${0}\n]"
	},
	"const array destructuring": {
		"prefix": "cad",
		"body": "const [{${1:name}}] = ${2:array}"
	},
	"const yielded assignment": {
		"prefix": "cy",
		"body": "const ${1:name} = yield ${2:value}"
	},

	//flow control
	"if statement": {
		"prefix": "ifs",
		"body": "if (${1:condition}) {\n\t${0}\n}"
	},
	"else statement": {
		"prefix": "ees",
		"body": "else {\n\t${0}\n}"
	},
	"if/else statement": {
		"prefix": "ies",
		"body": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}"
	},
	"else if statement": {
		"prefix": "eis",
		"body": "else if (${1:condition}) {\n\t${0}\n}"
	},
	"let - if statement": {
		"prefix": "letif",
		"body": "let ${1}\nif (${0}) {\n\t${1} = ${2}\n}"
	},
	"for loop": {
		"prefix": "fl",
		"body": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}"
	},
	"for in loop": {
		"prefix": "flin",
		"body": "for (let ${1:key} in ${2:source}) {\n\tif (${2:source}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}"
	},
	"for of loop": {
		"prefix": "flof",
		"body": "for (let ${1:key} of ${2:source}) {\n\t${0}\n}"
	},
	"while loop": {
		"prefix": "wl",
		"body": "while (${1:condition}) {\n\t${0}\n}"
	},
	"while iteration decrementing": {
		"prefix": "wid",
		"body": "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"
	},
	"try/catch": {
		"prefix": "tc",
		"body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
	},
	"try/finally": {
		"prefix": "tf",
		"body": "try {\n\t${0}\n} finally {\n\t\n}"
	},
	"try/catch/finally": {
		"prefix": "tcf",
		"body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
	},
	"throw new Error": {
		"prefix": "tn",
		"body": "throw new ${0:error}"
	},

	// functions
	"anonymous function": {
		"prefix": "fn",
		"body": "function (${1}) {${0}}"
	},
	"anonymous empty function": {
		"prefix": "fne",
		"body": "function () {${0}}"
	},
	"named function": {
		"prefix": "fnn",
		"body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
	},
	"arrow function": {
		"prefix": "af",
		"body": "(${1}) => {${0}}"
	},
	"arrow empty function": {
		"prefix": "afe",
		"body": "() => {${0}}"
	},
	"arrow function concise body": {
		"prefix": "afcb",
		"body": "(${1:arguments}) => ${2:statement}"
	},
	"generator function": {
		"prefix": "gf",
		"body": "function* (${1:arguments}) {\n\t${0}\n}"
	},
	"named generator function": {
		"prefix": "gfn",
		"body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"
	},
	"async function": {
		"prefix": "asf",
		"body": "async function (${1:arguments}) {\n\t${0}\n}"
	},
	"async arrow function": {
		"prefix": "asa",
		"body": "async (${1:arguments}) => {\n\t${0}\n}"
	},
	"immediately-invoked function expression": {
		"prefix": "iife",
		"body": ";(function (${1:arguments}) {\n\t${0}\n})(${2})"
	},
	"function apply": {
		"prefix": "fap",
		"body": "${1:fn}.apply(${2:this}, ${3:arguments})"
	},
	"function call": {
		"prefix": "fc",
		"body": "${1:fn}.call(${2:this}, ${3:arguments})"
	},
	"function bind": {
		"prefix": "fb",
		"body": "${1:fn}.bind(${2:this}, ${3:arguments})"
	},

	// iterables
	"forEach loop": {
		"prefix": "felp",
		"body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
	},
	"map": {
		"prefix": "map",
		"body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
	},
	"reduce": {
		"prefix": "reduce",
		"body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
	},
	"filter": {
		"prefix": "filter",
		"body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
	},
	"find": {
		"prefix": "find",
		"body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
	},
	"every": {
		"prefix": "every",
		"body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
	},
	"some": {
		"prefix": "some",
		"body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
	},

	// objects and classes
	"Object.assign": {
		"prefix": "oa",
		"body": "Object.assign(${1:dest}, ${2:source})"
	},
	"Object.create": {
		"prefix": "oc",
		"body": "Object.create(${1:obj})"
	},
	"Object.getOwnPropertyDescriptor": {
		"prefix": "og",
		"body": "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')"
	},
	"Object.defineProperty": {
		"prefix": "od",
		"body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"
	},
	"Object.keys": {
		"prefix": "ok",
		"body": "Object.keys(${1:obj})"
	},
	"prototype method": {
		"prefix": "proto",
		"body": "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"
	},

	"class": {
		"prefix": "cs",
		"body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
	},
	"class extends": {
		"prefix": "csx",
		"body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
	},
	"constructor": {
		"prefix": "cc",
		"body": "constructor () {\n\t${0}\n}"
	},
	"method": {
		"prefix": "cm",
		"body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
	},
	"getter": {
		"prefix": "cget",
		"body": "get ${1:property} () {\n\t${0}\n}"
	},
	"setter": {
		"prefix": "cset",
		"body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
	},
	"getter + setter": {
		"prefix": "cgs",
		"body": "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"
	},

	// return values
	"return": {
		"prefix": "rt",
		"body": "return ${0}"
	},
	"return this": {
		"prefix": "rtt",
		"body": "return this"
	},
	"return null": {
		"prefix": "rtn",
		"body": "return null"
	},
	"return new object": {
		"prefix": "rto",
		"body": "return {\n\t${0}\n}"
	},
	"return new array": {
		"prefix": "rta",
		"body": "return [\n\t${0}\n]"
	},
	"return promise": {
		"prefix": "rtp",
		"body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
	},

	// Promises
	"new Promise": {
		"prefix": "pnew",
		"body": "new Promise((resolve, reject) => {\n\t${0}\n})"
	},
	"Promise.all": {
		"prefix": "pall",
		"body": "Promise.all([${1:value}])"
	},
	"Promise.resolve": {
		"prefix": "presolve",
		"body": "Promise.resolve(${1:value})"
	},
	"Promise.reject": {
		"prefix": "preject",
		"body": "Promise.reject(${1:value})"
	},
	"Promise.then": {
		"prefix": "pthen",
		"body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
	},
	"Promise.catch": {
		"prefix": "pcatch",
		"body": "${1:promise}.catch(${2:err} => {\n\t${0}\n})"
	},
	"await": {
		"prefix": "awt",
		"body": "await ${0}"
	},
	"yield": {
		"prefix": "yd",
		"body": "yield ${0}"
	},

	// ES6 modules
	"importModuleDefault": {
		"prefix": "imd",
		"body": "import ${2:moduleName} from '${1:module}'$0",
		"description": "Import module default export"
	},
	"importModuleMember": {
		"prefix": "imm",
		"body": "import { $2 } from '${1:module}'$0",
		"description": "Import member(s) of module with destructuring"
	},
	"importModuleMemberAs": {
		"prefix": "imma",
		"body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
		"description": "Import member(s) of module in a local alias with destructuring"
	},
	"importModuleWithoutBindings": {
		"prefix": "imwb",
		"body": "import '${1:module}'$0",
		"description": "Import entire module without bindings"
	},
	"importModuleAs": {
		"prefix": "ima",
		"body": "import * as ${2:alias} from '${1:module}'$0",
		"description": "Import all exported bindings in a local alias"
	},
	"exportDefaultFunction": {
		"prefix": "edf",
		"body": "export default (${1:params}) =>  {\n\t$0\n}\n",
		"description": "Export default function"
	},
	"exportMemberFunction": {
		"prefix": "emf",
		"body": "export { ${0} }",
		"description": "Export member function(s)"
	},
	"exportNamedFunction": {
		"prefix": "enf",
		"body": "export const ${1:functionName} = (${2:params}) =>  {\n\t$0\n}\n",
		"description": "Export named function"
	},
	"exportDefaultClass": {
		"prefix": "edc",
		"body": "export default class ${1:className} {\n\t$0\n}\n",
		"description": "Export default class"
	},
	"exportDefaultClassExtends": {
		"prefix": "edce",
		"body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n}\n",
		"description": "Export default class that extends a base class"
	},

	// node.js modules
	"require": {
		"prefix": "rq",
		"body": "require('${1:module}')"
	},
	"const module = require('module')": {
		"prefix": "crq",
		"body": "const ${1:module} = require('${1:module}')"
	},
	"exports.member": {
		"prefix": "eme",
		"body": "exports.${1:member} = ${2:value}"
	},
	"module.exports": {
		"prefix": "moe",
		"body": "module.exports = ${1:name}"
	},
	"module as class": {
		"prefix": "mec",
		"body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}\n\nmodule.exports = ${1:name}\n"
	},
	"Node callback": {
		"prefix": "cb",
		"body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
	},

	//testing
	"Array.isArray()": {
		"prefix": "iarr",
		"body": "Array.isArray(${1:source})"
	},
	"typeof": {
		"prefix": "tyo",
		"body": "typeof ${1:source} === '${2:undefined}'"
	},
	"instanceof": {
		"prefix": "ino",
		"body": "${1:source} instanceof ${2:Object}"
	},
	"expect": {
		"prefix": "texpect",
		"body": "expect(${1})${0}",
		"description": "(expect, jasmine, jest, ...)"
	},
	// jest
	"describe (jest)": {
		"prefix": "adescribe",
		"body": "describe('${1:description}', () => {\n\t${0}\n})"
	},
	"test (jest)": {
		"prefix": "atest",
		"body": "test('${1:description}', () => {\n\t${0}\n})",
		"description": "Using an arrow function for jest"
	},
	"it (jest)": {
		"prefix": "ait",
		"body": "it('${1:description}', () => {\n\t${0}\n})",
		"description": "Alias for test, using an arrow function for jest"
	},
	"beforeAll (jest)": {
		"prefix": "abfa",
		"body": "beforeAll(() => {\n\t${0}\n})",
		"description": "beforeAll, using an arrow function for jest"
	},
	"beforeEach arrow": {
		"prefix": "abfe",
		"body": "beforeEach(() => {\n\t${0}\n})",
		"description": "beforeEach, using an arrow function for jest"
	},
	"afterAll (jest)": {
		"prefix": "aafa",
		"body": "afterAll(() => {\n\t${0}\n})",
		"description": "beforeAll, using an arrow function for jest"
	},
	"afterEach (jest)": {
		"prefix": "aafe",
		"body": "afterEach(() => {\n\t${0}\n})",
		"description": "afterEach, using an arrow function for jest"
	},
	// mocha jasmine
	"describe (mocha jasmine)": {
		"prefix": "tdescribe",
		"body": "describe('${1:description}', function () {\n\t${0}\n})"
	},
	"context (mocha)": {
		"prefix": "tcontext",
		"body": "describe('${1:description}', function () {\n\t${0}\n})",
		"description": "alias for describe (mocha)"
	},
	"synchronous it (mocha jasmine)": {
		"prefix": "tsit",
		"body": "it('${1:description}', function () {\n\t${0}\n})"
	},
	"asynchronous it (mocha jasmine)": {
		"prefix": "tait",
		"body": "it('${1:description}', function (${2:done}) {\n\t${0}\n})"
	},
	"test (mocha)": {
		"prefix": "ttest",
		"body": "test('${1:description}', function (${2:done}) {\n\t${0}\n})",
		"description": "alias for it (mocha)"
	},
	"before (mocha)": {
		"prefix": "tbf",
		"body": "before(function () {\n\t${0}\n})"
	},
	"beforeAll (jasmine)": {
		"prefix": "tbfa",
		"body": "beforeAll(function () {\n\t${0}\n})"
	},
	"beforeEach (mocha jasmine)": {
		"prefix": "tbfe",
		"body": "beforeEach(function () {\n\t${0}\n})"
	},
	"after (mocha)": {
		"prefix": "taf",
		"body": "after(function () {\n\t${0}\n})"
	},
	"afterAll (jasmine)": {
		"prefix": "tafa",
		"body": "afterAll(function () {\n\t${0}\n})"
	},
	"afterEach (mocha jasmine)": {
		"prefix": "tafe",
		"body": "afterEach(function () {\n\t${0}\n})"
	},
	"suite (mocha)": {
		"prefix": "tsuite",
		"body": "suite('${1:suiteName}', function() {\n\tsetup(function() {\n\t\t${2}\n\t})\n\tteardown(function() {\n\t\t${3}\n\t})\n\t${0}\n})",
		"description": "Mocha TDD suite with setup and teardown"
	},

	// timers
	"setTimeout": {
		"prefix": "sti",
		"body": "setTimeout(() => {\n\t${0}\n}, ${1:delay})"
	},
	"setInterval": {
		"prefix": "sin",
		"body": "setInterval(() => {\n\t${0}\n}, ${1:delay})"
	},
	"setImmediate": {
		"prefix": "sim",
		"body": "setImmediate(() => {\n\t${0}\n})"
	},

	// Miscellaneous JS
	"use strict": {
		"prefix": "ust",
		"body": "'use strict'"
	},
	"JSON.stringify()": {
		"prefix": "js",
		"body": "JSON.stringify($0)"
	},
	"JSON.parse()": {
		"prefix": "jp",
		"body": "JSON.parse($0)"
	},

	// Console
	"consoleAssert": {
		"prefix": "coa",
		"body": "console.assert(${1:expression}, ${2:object})",
		"description": "If the specified expression is false, the message is written to the console along with a stack trace"
	},
	"consoleClear": {
		"prefix": "coc",
		"body": "console.clear()",
		"description": "Clears the console"
	},
	"consoleCount": {
		"prefix": "coct",
		"body": "console.count(${1:label})",
		"description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
	},
	"consoleDir": {
		"prefix": "cod",
		"body": "console.dir(${1:object})",
		"description": "Prints a JavaScript representation of the specified object"
	},
	"consoleError": {
		"prefix": "coe",
		"body": "console.error(${1:object})",
		"description": "Displays a message in the console and also includes a stack trace from where the method was called"
	},
	"consoleGroup": {
		"prefix": "cog",
		"body": "console.group(\"${1:label}\")",
		"description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
	},
	"consoleGroupEnd": {
		"prefix": "coge",
		"body": "console.groupEnd()",
		"description": "Closes out the corresponding console.group()."
	},
	"consoleInfo": {
		"prefix": "coi",
		"body": "console.info(${1:object})",
		"description": "Displays a message in the console but also displays a blue information icon along with the logged message"
	},
	"consoleLog": {
		"prefix": "col",
		"body": "console.log(${1:object})",
		"description": "Displays a message in the console"
	},
	"consoleTrace": {
		"prefix": "cot",
		"body": "console.trace(${1:object})",
		"description": "Prints a stack trace from the point where the method was called"
	},
	"consoleWarn": {
		"prefix": "cow",
		"body": "console.warn(${1:object})",
		"description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
	},

	// DOM
	"addEventListener": {
		"prefix": "aev",
		"body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
	},
	"removeEventListener": {
		"prefix": "rev",
		"body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
	},
	"event handler": {
		"prefix": "evon",
		"body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});"
	},
	"dom event cancel default and propagation": {
		"prefix": "evc",
		"body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
	},
	"getElementById": {
		"prefix": "gi",
		"body": "${1:document}.getElementById('${2:id}')"
	},
	"getElementsByClassName": {
		"prefix": "gc",
		"body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
	},
	"getElementsByTagName": {
		"prefix": "gt",
		"body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
	},
	"querySelector": {
		"prefix": "qs",
		"body": "${1:document}.querySelector('${2:selector}')"
	},
	"querySelectorAll": {
		"prefix": "qsa",
		"body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
	},
	"createDocumentFragment": {
		"prefix": "cdf",
		"body": "${1:document}.createDocumentFragment(${2:elem})"
	},
	"createElement": {
		"prefix": "cel",
		"body": "${1:document}.createElement(${2:elem})"
	},
	"appendChild": {
		"prefix": "ach",
		"body": "${1:el}.appendChild(${2:elem})"
	},
	"removeChild": {
		"prefix": "rch",
		"body": "${1:el}.removeChild(${2:elem})"
	},
	"classList.add": {
		"prefix": "clad",
		"body": "${1:el}.classList.add('${2:class}')"
	},
	"classList.remove": {
		"prefix": "clr",
		"body": "${1:el}.classList.remove('${2:class}')"
	},
	"classList.toggle": {
		"prefix": "clt",
		"body": "${1:el}.classList.toggle('${2:class}')"
	},
	"getAttribute": {
		"prefix": "ga",
		"body": "${1:el}.getAttribute('${2:attr}')"
	},
	"removeAttribute": {
		"prefix": "ra",
		"body": "${1:el}.removeAttribute('${2:attr}')"
	},
	"setAttribute": {
		"prefix": "sa",
		"body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
	}
}